<?xml version="1.0"?>
<?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
<overlay id="rndphraseOverlay"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:nc="http://home.netscape.com/NC-rdf#"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


<script type="application/x-javascript">
<![CDATA[
var EXPORTED_SYMBOLS = ["CubeHash_Hash", "CubeHash_SelfTest"];

var ROTATE = function(a,b) { return (((a) << (b)) | ((a) >>> (32-b))); };

var CubeHash_INIT = new Array(-2096419883, 658334063, -679114902,
1246757400, -1523021469, -289996037, 1196718146, 1168084361,
-2027445816, -1170162360, -822837272, 625197683, 1543712850,
-1365258909, 759513533, -424228083, -13765010209, -2824905881,
-9887154026, 19352563566, 5669379852, -31581549269, 21359466527,
10648459874, -8561790247, 9779462261, -22434204802, -4124492433,
19608647852, 9541915967, 5144979599, -4355863926);

function CubeHash_Transform(state)
{
    var i,r;
    var y = new Array();
    for (r = 0;r < 8;++r) {
        for (i = 0;i < 16;++i) state[i + 16] += state[i];
        for (i = 0;i < 16;++i) y[i ^ 8] = state[i];
        for (i = 0;i < 16;++i) state[i] = ROTATE(y[i],7);
        for (i = 0;i < 16;++i) state[i] ^= state[i + 16];
        for (i = 0;i < 16;++i) y[i ^ 2] = state[i + 16];
        for (i = 0;i < 16;++i) state[i + 16] = y[i];
        for (i = 0;i < 16;++i) state[i + 16] += state[i];
        for (i = 0;i < 16;++i) y[i ^ 4] = state[i];
        for (i = 0;i < 16;++i) state[i] = ROTATE(y[i],11);
        for (i = 0;i < 16;++i) state[i] ^= state[i + 16];
        for (i = 0;i < 16;++i) y[i ^ 1] = state[i + 16];
        for (i = 0;i < 16;++i) state[i + 16] = y[i];
    }
}

function CubeHash_Hash(data)
{
    // init state
    var i,s="",state = new Array();
    for (i = 0; i < 32; i++) state[i] = CubeHash_INIT[i];
    // update with data
    data += String.fromCharCode(128);
    for (i = 0; i < data.length; i++) {
        state[0] ^= data.charCodeAt(i);
        CubeHash_Transform(state);
    }
    // finalize
    state[31] ^= 1;
    for (i = 0; i < 10; i++) CubeHash_Transform(state);
    // convert to hex
    for (i = 0; i < 8; i++) s += state[i].toHexStr();
    return s;
}

Number.prototype.toHexStr = function() {
    var s="";
    for(var v = this; v != 0; v >>>= 8)
        s += ((v>>4)&0xF).toString(16) + (v&0xF).toString(16);
    return s;
};

function CubeHash_SelfText() {

    var tests = ["", "Hello", "The quick brown fox jumps over the lazy dog"];
    var hashs = [
        "38d1e8a22d7baac6fd5262d83de89cacf784a02caa866335299987722aeabc59",
        "692638db57760867326f851bd2376533f37b640bd47a0ddc607a9456b692f70f",
        "94e0c958d85cdfaf554919980f0f50b945b88ad08413e0762d6ff0219aff3e55"];
    for(var i = 0; i < tests.length; i++) {
        if(CubeHash_Hash(tests[i]) != hashs[i]) return false;
    }
    return true;
}


]]>
</script>
<script type="application/x-javascript">
<![CDATA[

        // modification rules
        var rndphrase_mods = [
          [/absalon\.ku/, function(s){ return s+'A.'; }] // Add a capital 'A' to absalon.ku site passwords
        ];
        // personlized seed
        var seed = '';


        var Hash = CubeHash_Hash;

        function rndphrase_prng(seed, passwd, host) {
          return Hash(Hash(passwd) + Hash(seed) + Hash(host.toLowerCase())).substring(0,16);
        }

        function rndphrase_selftest() {
          if(!CubeHash_SelfText()) {
            return false;
          }
          var prng_tests = new Array(["foo", "bar", "example.net"]);
          var prng_hashs = new Array("5ecf8e8437188b6a");
          while(prng_tests.length > 0) {
            var test = prng_tests.pop();
            var seed = test[0], passwd = test[1], host = test[2];
            if(rndphrase_prng(seed, passwd, host) != prng_hashs.pop()) {
              return false;
            }
          }
          return true;
        }

        function to_array(iter) {
          var arr = new Array();
          for(var i = 0; i < iter.length; i++) {
            arr[i] = iter[i];
          }
          return arr;
        }

        function is_password_field(f) {
          return f.type != undefined && f.type.toLowerCase() == 'password';
        }
        function has_value(f) {
          return f.value != undefined && f.value.length > 0;
        }

        function rndphrase_form_update(seed,host,mods,doc) {
          var mod = mods.length ? mods[0][1] : function(s) { return s; };
          return function(f) {
            var onsubmit = f.onSubmit;
            var _set_passwd = function(p) {
              if(p.value[0] == '@') {
                p.value = mod((rndphrase_prng(seed, p.value.substring(1), host)).substring(0,16));
              } };
            var _onsubmit = function() {
                to_array(doc.getElementsByTagName("INPUT")).filter(is_password_field).filter(has_value).map(_set_passwd);
                if(onsubmit) return onsubmit();
                return true; };
            f.addEventListener('submit', _onsubmit, false);
          };
        }


        function rndphrase_host (host) {
            var host = host.substring(host.search(/[^\.]+\.[^\./]+$/));
            var mods = rndphrase_mods.filter(function(el) { return host.search(el[0]) != -1; } );
            return function(doc) {
                to_array(doc.getElementsByTagName("FORM")).map(rndphrase_form_update(seed,host,mods,doc));
            };
        }

        var rndPhraseExt = {
            init: function() {
                if(!rndphrase_selftest()) throw "Selftest failed!";
                var appcontent = document.getElementById("appcontent");   // browser
                if(appcontent) {
                    appcontent.addEventListener("DOMContentLoaded", rndPhraseExt.onPageLoad, true);
                    appcontent.addEventListener("DOMSubtreeModified", rndPhraseExt.onPageLoad, true);
                }
                var messagepane = document.getElementById("messagepane"); // mail
                if(messagepane)
                    messagepane.addEventListener("load", function () { rndPhraseExt.onPageLoad(); }, true);
            },

            onPageLoad: function(aEvent) {
                var doc = aEvent.originalTarget;
                var fn  = rndphrase_host(doc.location.host);
                fn(doc);
            }
        }

        window.addEventListener("load", function() { rndPhraseExt.init(); }, false);
   ]]>
   </script>

</overlay>
